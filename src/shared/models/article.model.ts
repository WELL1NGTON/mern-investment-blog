/**
 * @swagger
 *  components:
 *    schemas:
 *      Article:
 *        type: object
 *        required:
 *          - slug
 *          - title
 *          - author
 *          - description
 *          - tags
 *          - markdownArticle
 *          - date
 *          - previewImg
 *          - visibility
 *          - state
 *          - category
 *        properties:
 *          slug:
 *            type: string
 *          title:
 *            type: string
 *          author:
 *            type: string
 *          description:
 *            type: string
 *          tags:
 *            type: string[]
 *          markdownArticle:
 *            type: string
 *          previewImg:
 *            type: Date
 *          visibility:
 *            type: string
 *            description: ALL | EDITORS | USERS
 *            enum:
 *              - ALL
 *              - EDITORS
 *              - USERS
 *          state:
 *            type: string
 *            description: EDITING | PUBLISHED | DELETED
 *            enum:
 *              - EDITING
 *              - PUBLISHED
 *              - DELETED
 *          category:
 *            type: string
 *        example:
 *           slug: article-example
 *           title: Article Example
 *           author: Author Name
 *           description: Short article description example.
 *           tags: ["TAG EXAMPLE 1", "TAG EXAMPLE 2"]
 *           markdownArticle: "#MARKDOWN TITLE/n/nMarkdown text"
 *           date: 2020-11-20T20:29:05.220+00:00
 *           previewImg: https://herokuinvestmentblog.herokuapp.com/api/images/teste-image.jpg
 *           visibility: EDITORS
 *           state: EDITING
 *           category: CATEGORY EXAMPLE
 */

import mongoose, { Schema, Document } from "mongoose";
import slugify from "slugify";
import mongoose_fuzzy_searching, {
  MongooseFuzzyModel,
} from "mongoose-fuzzy-searching";
// import Category from "../models/category.model";

export interface IArticle extends Document {
  /**
   * @description "Slugified" title, generated by slugify
   * @type {string}
   * @memberof IArticle
   */
  slug: string;

  /**
   * @description Title of the article
   * @type {string}
   * @memberof IArticle
   */
  title: string;

  /**
   * @description Author (ID) of the article
   * @type {string}
   * @memberof IArticle
   */
  author: string;

  /**
   * @description Brief description of the article (plain text/string) to be shown as "cards" to the user
   * @type {string}
   * @memberof IArticle
   */
  description?: string;

  /**
   * @description Article tags for easier articles search.
   * @type {string[]}
   * @memberof IArticle
   */
  tags?: string[];

  /**
   * @description String with the main article text (using markdown to write)
   * @type {string}
   * @memberof IArticle
   */
  markdownArticle?: string;

  /**
   * @description Date when the article was writen (defaults to Date.now)
   * @type {Date}
   * @memberof IArticle
   */
  date?: Date;

  /**
   * @description Preview image that will be shown in the card with the description.
   * @type {string}
   * @memberof IArticle
   */
  previewImg?: string;

  /**
   * @description Defines who can see it
   * @type {("ALL" | "EDITORS" | "USERS")}
   * @memberof IArticle
   */
  visibility?: "ALL" | "EDITORS" | "USERS";

  /**
   * @description Defines the current state of the file (non authenticate users can only see the PUBLISHED ones)
   * @type {("EDITING" | "PUBLISHED" | "DELETED")}
   * @memberof IArticle
   */
  state?: "EDITING" | "PUBLISHED" | "DELETED";

  /**
   * @description Which category this article is in
   * @type {string}
   * @memberof IArticle
   */
  category?: string;
}

const ArticleSchema: Schema = new Schema(
  {
    slug: {
      type: String,
      required: true,
      unique: true,
    },
    title: {
      type: String,
      required: true,
      trim: true,
      minlength: 3,
    },
    author: { type: String, required: true },
    description: { type: String, default: "" },
    markdownArticle: { type: String, default: "" },
    date: { type: Date, default: Date.now },
    tags: { type: [String], default: [] },
    previewImg: { type: String },
    category: { type: String, default: "" },
    visibility: {
      type: String,
      enum: ["ALL", "EDITORS", "USERS"],
      default: "ALL",
      required: true,
    },
    state: {
      type: String,
      enum: ["EDITING", "PUBLISHED", "DELETED"],
      default: "EDITING",
      required: true,
    },
  },
  {
    timestamps: true,
  }
);

ArticleSchema.plugin(mongoose_fuzzy_searching, {
  fields: [
    { name: "title", weight: 2 },
    { name: "description", weight: 1 },
    // { name: "markdownArticle", weight: 1 },
  ],
});

ArticleSchema.pre<IArticle>("validate", function (next) {
  if (this.title) {
    this.slug = slugify(this.title, { lower: true, strict: true });
    this.tags = this.tags?.map((tag: string) => tag.toUpperCase());
  }

  next();
});

// ArticleSchema.post<IArticle>("save", function (doc) {
//   if (doc.tags.length > 0) {
//     doc.tags.forEach((tag) => {
//       Category.findOneAndUpdate(
//         { name: tag },
//         { $inc: { posts_count: 1 } },
//         { upsert: true, new: true, setDefaultsOnInsert: true }
//       )
//         .exec()
//         .catch((err) => console.log("Error: " + err));
//     });
//   }
// });

// ArticleSchema.post<IArticle>("remove", function (doc) {
//   if (doc.tags.length > 0) {
//     doc.tags.forEach((tag) => {
//       Category.findOneAndUpdate(
//         { name: tag },
//         { $inc: { posts_count: -1 } },
//         { upsert: true, new: true, setDefaultsOnInsert: true }
//       )
//         .exec()
//         .catch((err) => console.log("Error: " + err));
//     });
//   }
// });

// ArticleSchema.post<IArticle>("remove", function (doc) {
//   if (doc.tags.length > 0) {
//     doc.tags.forEach((tag) => {
//       Category.findOneAndUpdate(
//         { name: tag },
//         { $inc: { posts_count: -1 } },
//         { upsert: true, new: true, setDefaultsOnInsert: true }
//       )
//         .exec()
//         .catch((err) => console.log("Error: " + err));
//     });
//   }
// });

export default mongoose.model<IArticle>(
  "Article",
  ArticleSchema
) as MongooseFuzzyModel<IArticle>;
